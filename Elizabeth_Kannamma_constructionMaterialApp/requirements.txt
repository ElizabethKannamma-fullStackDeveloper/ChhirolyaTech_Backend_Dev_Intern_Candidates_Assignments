Use npm list or yarn list to see all installed dependencies.

You can get a flat list of all the dependencies in your project with either npm list or yarn list (depending on your package manager).

If you want a list of just the top-level dependencies (without nested dependencies), run:

```bash
npm list --depth=0
```

```bash
@emotion/react==11.11.4
@emotion/styled==11.11.5
@fortawesome/fontawesome-svg-core==6.5.2
@fortawesome/free-brands-svg-icons==6.5.2
@fortawesome/free-regular-svg-icons==6.5.2
@fortawesome/free-solid-svg-icons==6.5.2
@fortawesome/react-fontawesome==0.2.2
@mui/icons-material==5.16.1
@mui/material==5.16.1
@stripe/react-stripe-js==2.7.3
@stripe/stripe-js==4.1.0
axios==1.7.2
formik==2.4.6
jsonwebtoken==9.0.2
jwt-decode==4.0.0
react==18.3.1
react-dom==18.3.1
react-redux==9.1.2
react-router-dom==6.24.1
react-toastify==10.0.5
yup==1.4.0

```
## Dev Dependencies (Optional)
If you want to include devDependencies as well (for the tools used to build and test the project), you could create a separate list for dev tools or combine everything in one requirements.txt like so:

```bash
@types/react==18.3.3
@types/react-dom==18.3.0
@vitejs/plugin-react==4.3.1
eslint==8.57.0
eslint-plugin-react==7.34.2
eslint-plugin-react-hooks==4.6.2
eslint-plugin-react-refresh==0.4.7
vite==5.3.1
```

Note:
npm vs yarn: If you use npm, it will manage node_modules for you, and you can simply use npm install to install dependencies listed in package.json. Yarn uses yarn.lock for a similar purpose.